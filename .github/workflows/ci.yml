name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-quick:
    name: Quick Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        cd python-search-api
        make install

    - name: Run quick tests
      run: |
        cd python-search-api
        make test-quick

  test-api:
    name: API Tests
    runs-on: ubuntu-latest
    needs: test-quick
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        cd python-search-api
        make install

    - name: Run API tests
      run: |
        cd python-search-api
        make test-api

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-quick
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        cd python-search-api
        make install

    - name: Run integration tests
      run: |
        cd python-search-api
        make test-integration

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test-api, test-integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        cd python-search-api
        make install

    - name: Generate coverage report
      run: |
        cd python-search-api
        make coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./python-search-api/coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        cd python-search-api
        make install

    - name: Run linting
      run: |
        cd python-search-api
        make lint

    - name: Check formatting
      run: |
        cd python-search-api
        make format
        # Check if there are any formatting changes
        git diff --exit-code

    - name: Run type checking
      run: |
        cd python-search-api
        make type-check

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test-api, test-integration, coverage, code-quality]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      run: |
        cd python-search-api
        make docker-build

    - name: Tag image for registry
      run: |
        cd python-search-api
        GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
        docker tag fafnerzhang/python-search-api:$GIT_COMMIT_SHA ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$GIT_COMMIT_SHA
        docker tag fafnerzhang/python-search-api:$GIT_COMMIT_SHA ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        if [ "${{ github.ref_name }}" = "main" ]; then
          docker tag fafnerzhang/python-search-api:$GIT_COMMIT_SHA ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        fi

    - name: Push Docker image
      run: |
        cd python-search-api
        GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$GIT_COMMIT_SHA
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        if [ "${{ github.ref_name }}" = "main" ]; then
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        fi

  docker-test:
    name: Docker Test
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test Docker container
      run: |
        cd python-search-api
        GIT_COMMIT_SHA=$(git rev-parse --short HEAD)
        
        # Pull and run the image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$GIT_COMMIT_SHA
        docker run -d --name test-container -p 9410:9410 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$GIT_COMMIT_SHA
        
        # Wait for container to be ready
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:9410/health || exit 1
        
        # Test API endpoints
        curl -f http://localhost:9410/docs || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, docker-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example, if using a cloud provider or orchestration tool

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, docker-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example, if using a cloud provider or orchestration tool
