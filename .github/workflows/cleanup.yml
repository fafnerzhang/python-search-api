name: Cleanup & Maintenance

on:
  schedule:
    - cron: '0 4 * * 0' # Run weekly on Sunday at 4 AM
  workflow_dispatch: # Allow manual trigger

jobs:
  cleanup-artifacts:
    runs-on: ubuntu-latest
    permissions:
      actions: write

    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          // Keep artifacts from last 30 days
          const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
          
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < thirtyDaysAgo) {
              console.log(`Deleting artifact: ${artifact.name} (${artifact.created_at})`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
          }

  cleanup-packages:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
    - name: Cleanup old container images
      uses: actions/github-script@v7
      with:
        script: |
          // This would require package:write permissions
          // Keep only latest 10 versions of each package
          console.log("Package cleanup would run here");

  code-cleanup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Clean temporary files
      run: |
        # Remove Python cache files
        find . -type d -name "__pycache__" -exec rm -rf {} + || true
        find . -type f -name "*.pyc" -delete || true
        find . -type f -name "*.pyo" -delete || true
        
        # Remove test artifacts
        rm -rf .pytest_cache/ || true
        rm -rf htmlcov/ || true
        rm -rf .coverage || true
        rm -rf coverage.xml || true

    - name: Run security audit
      run: |
        uv add safety
        uv run safety check --json --output safety-report.json || true

    - name: Generate maintenance report
      run: |
        echo "# Maintenance Report - $(date)" > maintenance-report.md
        echo "" >> maintenance-report.md
        echo "## Dependencies Status" >> maintenance-report.md
        uv tree >> maintenance-report.md
        echo "" >> maintenance-report.md
        echo "## Security Scan Results" >> maintenance-report.md
        if [ -f safety-report.json ]; then
          echo "Safety report generated" >> maintenance-report.md
        else
          echo "No security issues found" >> maintenance-report.md
        fi

    - name: Upload maintenance report
      uses: actions/upload-artifact@v4
      with:
        name: maintenance-report-${{ github.run_number }}
        path: |
          maintenance-report.md
          safety-report.json

  health-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python 3.11
      run: uv python install 3.11

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Check project health
      run: |
        echo "Checking project health..."
        
        # Check if all required files exist
        required_files=("pyproject.toml" "README.md" "main.py" "Makefile")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
          fi
        done
        
        # Check code quality
        echo "Running quick quality checks..."
        uv run --group dev black --check src/ tests/ || echo "⚠️ Code formatting issues"
        uv run --group dev flake8 src/ tests/ --max-line-length=88 --ignore=E203,W503 || echo "⚠️ Linting issues"
        
        # Check test status
        echo "Running quick tests..."
        PYTHONPATH=src uv run --group dev pytest tests/test_models.py -v --tb=short || echo "⚠️ Test failures"

    - name: Repository statistics
      run: |
        echo "## Repository Statistics" > repo-stats.md
        echo "- Total files: $(find . -type f | wc -l)" >> repo-stats.md
        echo "- Python files: $(find . -name "*.py" | wc -l)" >> repo-stats.md
        echo "- Test files: $(find tests/ -name "*.py" | wc -l)" >> repo-stats.md
        echo "- Lines of code: $(find src/ -name "*.py" -exec cat {} \; | wc -l)" >> repo-stats.md
        echo "- Lines of tests: $(find tests/ -name "*.py" -exec cat {} \; | wc -l)" >> repo-stats.md
        cat repo-stats.md

    - name: Upload health report
      uses: actions/upload-artifact@v4
      with:
        name: health-report-${{ github.run_number }}
        path: repo-stats.md
